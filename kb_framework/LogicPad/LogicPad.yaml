atomic_predicates:
  semantic_segmentation:
    - Road(x)
    - LaneMarking(x)
    - Trafficsign(x)
    - Sidewalk(x)
    - Fence(x)
    - Pole(x)
    - Wall(x)
    - Building(x)
    - Vegetation(x)
    - Vehicles(x)
    - Pedestrian(x)
    - Terrain(x)
    - Bridge(x)
    - Guardrail(x)
    - RailTrack(x)
    - Trafficlight(x)
    - ConstructionObj(x)
    - Tree(x)
    - Person(x)
    - Billboard(x)
    - MobileBarrier(x)
    - FireHydrant(x)
    - Chair(x)
    - Trash(x)
    - Trashcan(x)
    - Infrastructure(x)

  tracker:
    - Appears(x)
    - Disappears(x)
    - Moving(x)
    - NotMoving(x)
    - SpeedUp(x)
    - SpeedDown(x)
    - NotSpeedUp(x)
    - NotSpeedDown(x)
    - CloseToCamera(x)
    - AtRight(x)
    - AtLeft(x)
    - AtCenter(x)
    - DistanceIncrease(x, y)
    - DistanceDecrease(x, y)
    - DistanceDecreasesToZero(x, y)
    - DistanceZeroEnd(x, y)
    - DistanceZeroStart(x, y)
    - NotDistanceDecrease(x, y)
    - NotDistanceIncrease(x, y)
    - On(x, y)

functions:
  ColorOf:
    predicate: ColorOf(x, color)
    values:
      - Black
      - Blue
      - Brown
      - Cyan
      - Green
      - Grey
      - Orange
      - Red
      - Violet
      - White
      - Yellow
      - Other

  TypeOf:
    predicate: TypeOf(x, type)
    values:
      - Car
      - Cab
      - Convertible
      - Coupe
      - Hatchback
      - Minivan
      - Other
      - SUV
      - Sedan
      - Van
      - Wagon

  location:
    InitialLocation:
      predicate: InitialLocation(x, location)
      values:
        - Left
        - Right
        - Front
        - NearLeft
        - FarLeft
        - NearRight
        - FarRight
        - NearFront
        - FarFront

    LastLocation:
      predicate: LastLocation(x, location)
      values:
        - Left
        - Right
        - Front
        - NearLeft
        - FarLeft
        - NearRight
        - FarRight
        - NearFront
        - FarFront

derived_predicates:
  - name: Stopped
    logic:
      - "∀x : ¬Move(x) ==> Stopped(x)"
      - "∀x : ¬Moving(x) ==> Stopped(x)"

  - name: Walk
    logic: "∀x : Pedestrian(x) ∧ Moving(x) ==> Walk(x)"

  - name: Stand
    logic: "∀x : Pedestrian(x) ∧ ¬Moving(x) ==> Stand(x)"

  - name: Accelerate
    logic:
      - "∀x : Vehicles(x) ∧ SpeedUp(x) ==> Accelerate(x)"
      - "∀x : Pedestrian(x) ∧ SpeedUp(x) ==> Accelerate(x)"

  - name: Decelerate
    logic:
      - "∀x : Vehicles(x) ∧ SpeedDown(x) ==> Decelerate(x)"
      - "∀x : Pedestrian(x) ∧ SpeedDown(x) ==> Decelerate(x)"

  - name: NotAccelerate
    logic: "∀x : ¬SpeedUp(x) ==> ¬Accelerate(x)"

  - name: NotDecelerate
    logic: "∀x : ¬SpeedDown(x) ==> ¬Decelerate(x)"

  - name: ConstantSpeed
    logic:
      - "∀x : Vehicles(x) ∧ ¬Accelerate(x) ∧ ¬Decelerate(x) ==> ConstantSpeed(x)"
      - "∀x : Pedestrian(x) ∧ ¬Accelerate(x) ∧ ¬Decelerate(x) ==> ConstantSpeed(x)"

  - name: IncreasePace
    logic: "∀x : Pedestrian(x) ∧ SpeedUp(x) ==> IncreasePace(x)"

  - name: DecreasePace
    logic: "∀x : Pedestrian(x) ∧ SpeedDown(x) ==> DecreasePace(x)"

  - name: FixedPace
    logic: "∀x : Pedestrian(x) ∧ ¬SpeedUp(x) ∧ ¬SpeedDown(x) ==> FixedPace(x)"

  - name: Move
    logic:
      - "∀x : Vehicles(x) ∧ Moving(x) ==> Move(x)"
      - "∀x : Pedestrian(x) ∧ Moving(x) ==> Move(x)"

  - name: GettingCloser
    logic: "∀x,y : DistanceDecrease(x, y) ==> GettingCloser(x, y)"

  - name: Collide
    logic: "∀x,y : DistanceDecrease(x, y) ∧ DistanceDecreasesToZero(x, y) ∧ Vehicles(x) ∧ Vehicles(y) ==> Collide(x, y)"

  - name: ComeClose
    logic: "∀x,y : DistanceDecrease(x, y) ==> ComeClose(x, y)"

  - name: GoAway
    logic: "∀x,y : DistanceIncrease(x, y) ==> GoAway(x, y)"

  - name: ConstantDistance
    logic:
      - "∀x,y : ¬DistanceDecrease(x, y) ∧ ¬DistanceIncrease(x, y) ==> ConstantDistance(x, y)"

  - name: Cross
    logic: "∀x : Pedestrian(x) ∧ On(x, y) ∧ Road(y) ==> Cross(x)"

  - name: NotCross
    logic: "∀x : Pedestrian(x) ∧ On(x, y) ∧ Sidewalk(y) ==> NotCross(x)"

  - name: Crash
    logic: "∀x,y : DistanceDecrease(x, y) ∧ DistanceZeroEnd(x, y) ∧ ConstructionObj(y) ∧ Vehicles(x) ==> Crash(x, y)"

  - name: Merge
    logic: "∀x,y : DistanceDecrease(x, y) ∧ DistanceZeroEnd(x, y) ∧ Disappear(x) ∧ Vehicles(y) ∧ Vehicles(x) ==> Merge(x, y)"

  - name: Enter
    logic: "∀x,y : DistanceDecrease(x, y) ∧ DistanceZeroEnd(x, y) ∧ Disappear(x) ∧ Vehicles(y) ∧ Pedestrian(x) ==> Enter(x, y)"

  - name: Diverge
    logic: "∀x,y : DistanceIncrease(x, y) ∧ DistanceZeroStart(x, y) ∧ Appear(x) ∧ Vehicles(y) ∧ Vehicles(x) ==> Diverge(x, y)"

  - name: Exit
    logic: "∀x,y : DistanceIncrease(x, y) ∧ DistanceZeroStart(x, y) ∧ Appear(x) ∧ Vehicles(y) ∧ Pedestrian(x) ==> Exit(x, y)"

  - name: Ride
    logic: "∀x,y : Pedestrian(x) ∧ Vehicles(y) ∧ TypeOf(y, Motorcycle) ∧ On(x, y) ==> Ride(x, y)"

  - name: IsVehicles
    logic: "∀x : Vehicles(x) ==> IsVehicles(x)"

  - name: IsBuilding
    logic: "∀x : Building(x) ==> IsBuilding(x)"

  - name: IsPerson
    logic:
      - "∀x : Pedestrian(x) ==> Person(x)"
      - "∀x : Person(x) ==> IsPerson(x)"

  - name: IsPedestrian
    logic:
      - "∀x : Person(x) ==> Pedestrian(x)"
      - "∀x : Pedestrian(x) ==> IsPedestrian(x)"

  - name: IsInfrastructure
    logic: "∀x : Infrastructure(x) ==> IsInfrastructure(x)"

  - name: IsFence
    logic: "∀x : Fence(x) ==> IsFence(x)"

  - name: IsBillboard
    logic: "∀x : Billboard(x) ==> IsBillboard(x)"

  - name: IsMobileBarrier
    logic: "∀x : MobileBarrier(x) ==> IsMobileBarrier(x)"

  - name: IsFireHydrant
    logic: "∀x : FireHydrant(x) ==> IsFireHydrant(x)"

  - name: IsChair
    logic: "∀x : Chair(x) ==> IsChair(x)"

  - name: IsTrash
    logic: "∀x : Trash(x) ==> IsTrash(x)"

  - name: IsTrashcan
    logic: "∀x : Trashcan(x) ==> IsTrashcan(x)"

  - name: IsTerrain
    logic: "∀x : Terrain(x) ==> IsTerrain(x)"

  - name: IsBridge
    logic: "∀x : Bridge(x) ==> IsBridge(x)"

  - name: IsPole
    logic: "∀x : Pole(x) ==> IsPole(x)"

  - name: IsGuardrail
    logic: "∀x : Guardrail(x) ==> IsGuardrail(x)"

  - name: IsRailTrack
    logic: "∀x : RailTrack(x) ==> IsRailTrack(x)"

  - name: IsVegetation
    logic: "∀x : Vegetation(x) ==> IsVegetation(x)"

  - name: IsTrafficlight
    logic: "∀x : Trafficlight(x) ==> IsTrafficlight(x)"

  - name: IsTrafficSign
    logic:
      - "∀x : Trafficsign(x) ==> TrafficSign(x)"
      - "∀x : TrafficSign(x) ==> IsTrafficSign(x)"

  - name: Appeared
    logic: "∀x : Appear(x) ==> Appeared(x)"

  - name: Disappeared
    logic: "∀x : Disappear(x) ==> Disappeared(x)"
